//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $pipes_box  = parameter(Name=>'PipesBox',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in bbox module");
//; my $pipes_iter = parameter(Name=>'PipesIter',
//;                            Val=>1, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in iter module");
//; my $pipes_hash = parameter(Name=>'PipesHash',
//;                            Val=>2, Min=>1, Step=>1, 
//;                            Doc=>"Number of pipe stages in hash module");
//; my $pipes_samp = parameter(Name=>'PipesSamp',
//;                            Val=>2, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in sample module");

module `mname()`  
(
   input logic signed [`$sig_fig`-1:0] poly_R10S[`$verts`-1:0][`$axis`-1:0],
   input logic unsigned [`$sig_fig`-1:0] color_R10U[`$colors`-1:0],
   input logic isQuad_R10H,
   input logic validPoly_R10H,
   input logic signed [`$sig_fig`-1:0] screen_RnnnnS[1:0],
   input logic [3:0] subSample_RnnnnU,
   input logic clk, 
   input logic rst,
   output logic halt_RnnnnL,
   output logic signed [`$sig_fig`-1:0] hit_R18S[`$axis`-1:0],
   output logic unsigned [`$sig_fig`-1:0] color_R18U[`$colors`-1:0],
   output logic hit_valid_R18H
);

  Rasterizer dut (
    .CLK(clk),
    .RESET(rst),
    
    //; for( my $i = 0 ; $i < $colors ; $i++ ) {
    .color_in_`$i`(color_R10U[`$i`]),
    .color_out_`$i`(color_R18U[`$i`]),
    //; }
    
    .halt(halt_RnnnnL),
    
    //; for( my $i = 0 ; $i < $axis ; $i++ ) {
    .hit_`$i`(hit_R18S[`$i`]),
    //; }
    
    .is_quad(isQuad_R10H),
    
    //; for( my $i = 0 ; $i < $verts ; $i++ ) {
    //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
    .poly_`$i`_`$j`(poly_R10S[`$i`][`$j`]),
    //;   }
    //; }
    
    .sample_size(subSample_RnnnnU),
    .screen_max_0(screen_RnnnnS[0]),
    .screen_max_1(screen_RnnnnS[1]),
    .valid_hit(hit_valid_R18H),
    .valid_in(validPoly_R10H)
);

endmodule
