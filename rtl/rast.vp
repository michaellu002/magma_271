/*
 * Reyes Style Hider:
 *     
 *  This module accepts a stream of micropolygons
 *  and produces a stream of fragments
 * 
 *  This module contains three submodules:
 *    -bounding box module which generates the bounding box
 *     for a micropolygon
 *    -test iterator module which iterates over the bounding 
 *    -sample test function which tests to see if the sample
 *     location from the bounding box lay inside the micropolygon
 * 
 * 
 *   Author: John Brunhaver
 *   Created:          09/21/09
 *   Last Updated: TUE 10/20/09
 *
 *   Copyright 2009 <jbrunhaver@gmail.com>   
 */


/* ***************************************************************************
 * Change bar:
 * -----------
 * Date           Author    Description
 * Sep 19, 2012   jingpu    ported from John's original code to Genesis
 *                          
 * ***************************************************************************/

/******************************************************************************
 * PARAMETERIZATION
 * ***************************************************************************/
//; # module parameters
//; my $sig_fig    = parameter(Name=>'SigFig',
//;                            Val=>24, Min=>1, Step=>1, 
//;                            Doc=>"Bits in color and position.");
//; my $radix      = parameter(Name=>'Radix',
//;                            Val=>10, Min=>1, Step=>1, 
//;                            Doc=>"Fraction bits in color and position");
//; my $verts      = parameter(Name=>'Vertices',
//;                            Val=>3, Min=>3, Step=>1, 
//;                            Doc=>"Maximum Vertices in micropolygon");
//; my $axis       = parameter(Name=>'Axis',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of axis foreach vertex 3 is (x,y,z).");
//; my $colors     = parameter(Name=>'Colors',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of color channels");
//; my $pipes_box  = parameter(Name=>'PipesBox',
//;                            Val=>3, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in bbox module");
//; my $pipes_iter = parameter(Name=>'PipesIter',
//;                            Val=>1, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in iter module");
//; my $pipes_hash = parameter(Name=>'PipesHash',
//;                            Val=>2, Min=>1, Step=>1, 
//;                            Doc=>"Number of pipe stages in hash module");
//; my $pipes_samp = parameter(Name=>'PipesSamp',
//;                            Val=>2, Min=>1, Step=>1, 
//;                            Doc=>"Number of Pipe Stages in sample module");

module `mname()`  
  (
   // Input Signals
   input logic signed [`$sig_fig`-1:0] 	poly_R10S[`$verts`-1:0][`$axis`-1:0] , // Poly Position
   input logic 				unsigned [`$sig_fig`-1:0] color_R10U[`$colors`-1:0] , // Color of Poly
   input logic 				isQuad_R10H , // Is Poly Quad?
   input logic 				validPoly_R10H , // Valid Data for Operation

   // Input Control Signals ( ala CSR )
   input logic signed [`$sig_fig`-1:0] 	screen_RnnnnS[1:0] , // Screen Dimensions
   input logic [3:0] 			subSample_RnnnnU , // SubSample_Interval

   // Global Signals 
   input logic 				clk, // Clock 
   input logic 				rst, // Reset

   // Output Control Signals
   output logic 			halt_RnnnnL,
  
   // Output Signals
   output logic signed [`$sig_fig`-1:0] hit_R18S[`$axis`-1:0], // Hit Location
   output logic 			unsigned [`$sig_fig`-1:0] color_R18U[`$colors`-1:0] , // Color of Poly 
   output logic 			hit_valid_R18H            // Is this a hit?
   );

   integer bbox_file;
   integer sample_file;
   integer hash_file;
   integer iterator_file;
   integer rast_file;
  
   initial begin
     bbox_file = $fopen("ComputeBoundingBox_vector.json", "w");
     $fdisplay(bbox_file, "[");
     
     sample_file = $fopen("SampleTest_vector.json", "w");
     $fdisplay(sample_file, "[");

     hash_file = $fopen("HashJTree_vector.json", "w");
     $fdisplay(hash_file, "[");

     iterator_file = $fopen("Iterator_vector.json", "w");
     $fdisplay(iterator_file, "[");

     rast_file = $fopen("Rasterizer_vector.json", "w");
     $fdisplay(rast_file, "[");
   end

   always @(posedge clk) begin 
     $fdisplay(rast_file, "{\"RESET\": \"%b\",", rst);
     
     $fdisplay(rast_file, "\"valid_in\": \"%b\",", validPoly_R10H);
     
     $fdisplay(rast_file, "\"poly\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(rast_file, "\"poly\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R10S[`$i`][`$j`],
     //;    }
     //;  }
     ",");
     
     $fdisplay(rast_file, "\"color_in\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(rast_file, "\"color_in\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R10U[`$j`],
     //;    }    
     ",");

     $fdisplay(rast_file, "\"is_quad\": \"%b\",", isQuad_R10H);
     $fdisplay(rast_file, "\"screen_max\": [\"%b\", \"%b\"],", screen_RnnnnS[0], screen_RnnnnS[1]);
     $fdisplay(rast_file, "\"sample_size\": \"%b\",", subSample_RnnnnU);
     $fdisplay(rast_file, "\"halt\": \"%b\",", halt_RnnnnL);
     $fdisplay(rast_file, "\"valid_hit\": \"%b\",", hit_valid_R18H);
     
     $fdisplay(rast_file, "\"hit\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(rast_file, "\"hit\": [\"%h\", \"%h\", \"%h\"]", 
     //; for( my $i = 0 ; $i < $axis ; $i++ ) {
       hit_R18S[`$i`],
     //;  }
     ",");

     $fdisplay(rast_file, "\"color_out\": [\"%b\", \"%b\", \"%b\"]}", 
     //$fdisplay(rast_file, "\"color_out\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R18U[`$j`],
     //;    }    
     );
     $fdisplay(rast_file, ",");
   end
 

 
   //Intermediate Signals
   logic  signed [`$sig_fig`-1:0] 	box_R13S[1:0][1:0];             // 2 Sets X,Y Fixed Point Values   
   logic  signed [`$sig_fig`-1:0] 	poly_R13S[`$verts`-1:0][`$axis`-1:0]; // 4 Sets X,Y Fixed Point Values
   logic 				unsigned [`$sig_fig`-1:0]  color_R13U[`$colors`-1:0]  ;       // Color of Poly
   logic 				validPoly_R13H;                 // Valid Data for Operation
   logic 				isQuad_R13H;                    // Is Poly Quad?
   
   logic signed [`$sig_fig`-1:0] 	poly_R14S[`$verts`-1:0][`$axis`-1:0]; //Micropolygon to Sample Test
   logic 				unsigned [`$sig_fig`-1:0]   color_R14U[`$colors`-1:0] ;         // Color of Poly
   logic 				isQuad_R14H;                    //Micropygon is quad
   logic signed [`$sig_fig`-1:0] 	sample_R14S[1:0];               //Sample Location to Be Tested
   logic 				validSamp_R14H;                 //Sample and Micropolygon are Valid
   
   logic signed [`$sig_fig`-1:0] 	poly_R16S[`$verts`-1:0][`$axis`-1:0]; //Micropolygon to Sample Test
   logic 				unsigned [`$sig_fig`-1:0]   color_R16U[`$colors`-1:0] ;         //Color of Poly
   logic 				isQuad_R16H;                    //Micropygon is quad
   logic signed [`$sig_fig`-1:0] 	sample_R16S[1:0];               //Sample Location to Be Tested
   logic 				validSamp_R16H;                 //Sample and Micropolygon are Valid
   
   logic [`$sig_fig`-1:0] 		zero;                     //fudge signal to hold zero as a reset value
   logic [127:0] 			big_zero;                 //fudge signal to hold zero as a reset value
   //Intermediate Signals

   assign big_zero = 128'd0;
   assign zero = big_zero[`$sig_fig`-1:0];  

   //TODO: Missing Micropolygon color
   
   //TODO: Make param pipedepth work
   
   //; my $bbox = generate( 'bbox', "bbox", 
   //;                        SigFig=>$sig_fig,
   //;                        Radix=>$radix,
   //;                        Vertices=>$verts,
   //;                        Axis=>$axis,
   //;                        Colors=>$colors,
   //;                        PipelineDepth=>$pipes_box);
   `$bbox -> instantiate()` (
			     .poly_R10S(poly_R10S) ,
			     .color_R10U(color_R10U) ,	      
			     .isQuad_R10H(isQuad_R10H) ,
			     .validPoly_R10H(validPoly_R10H) ,
      
			     .halt_RnnnnL(halt_RnnnnL) , 
			     .screen_RnnnnS(screen_RnnnnS) ,
			     .subSample_RnnnnU(subSample_RnnnnU) ,
      
			     .clk(clk),
			     .rst(rst),
      
			     .poly_R13S(poly_R13S),
			     .color_R13U(color_R13U) ,	      
			     .isQuad_R13H(isQuad_R13H),
			     .box_R13S(box_R13S),
			     .validPoly_R13H(validPoly_R13H) 
			     ) ; 
    
   // Generating vectors for bbox
   // 'RESET': Reset, 'valid_in': Bits(1), 'poly_in':
   // Array(3,Array(3,Out(SInt(24)))), 'color_in': Array(3,Out(UInt(24))),
   // 'screen_max': Array(2,Out(SInt(24))), 'sample_size': Bits(4), 'halt':
   // Bits(1), 'valid_out': Bits(1), 'poly_out':
   // Array(3,Array(3,In(SInt(24)))), 'color_out': Array(3,In(UInt(24))),
   // 'box': Array(2,Array(2,In(SInt(24)))), 'is_quad_in': Bits(1),
   // 'is_quad_out': Bits(1)}

   always @(posedge clk) begin 
     $fdisplay(bbox_file, "{\"RESET\": \"%b\",", rst);
     
     $fdisplay(bbox_file, "\"valid_in\": \"%b\",", validPoly_R10H);
     
     $fdisplay(bbox_file, "\"poly_in\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(bbox_file, "\"poly_in\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R10S[`$i`][`$j`],
     //;    }
     //;  }
     ",");
     
     $fdisplay(bbox_file, "\"color_in\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(bbox_file, "\"color_in\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R10U[`$j`],
     //;    }    
     ",");
      
     $fdisplay(bbox_file, "\"screen_max\": [\"%b\", \"%b\"],", screen_RnnnnS[0], screen_RnnnnS[1]);
     
     $fdisplay(bbox_file, "\"sample_size\": \"%b\",", subSample_RnnnnU);
     
     $fdisplay(bbox_file, "\"halt\": \"%b\",", halt_RnnnnL);
     
     $fdisplay(bbox_file, "\"valid_out\": \"%b\",", validPoly_R13H);
     
     $fdisplay(bbox_file, "\"poly_out\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(bbox_file, "\"poly_out\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R13S[`$i`][`$j`],
     //;    }
     //;  }
     ",");
     
     $fdisplay(bbox_file, "\"color_out\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(bbox_file, "\"color_out\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R13U[`$j`],
     //;    }    
     ",");
     
     $fdisplay(bbox_file, "\"box\": [[\"%b\", \"%b\"], [\"%b\", \"%b\"]]", 
     //$fdisplay(bbox_file, "\"box\": [[\"%h\", \"%h\"], [\"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < 2 ; $i++ ) {
     //; 	for( my $j = 0 ; $j < 2 ; $j++ ) {
       box_R13S[`$i`][`$j`],
     //;    }
     //;  }
     ",");
     
     $fdisplay(bbox_file, "\"is_quad_in\": \"%b\",", isQuad_R10H);
      
     $fdisplay(bbox_file, "\"is_quad_out\": \"%b\"}", isQuad_R13H);
     
     $fdisplay(bbox_file, ",");
   end

   //; my $test_iterator = generate( 'test_iterator', "test_iterator", 
   //;                        SigFig=>$sig_fig,
   //;                        Radix=>$radix,
   //;                        Vertices=>$verts,
   //;                        Axis=>$axis,
   //;                        Colors=>$colors,
   //;                        PipelineDepth=>$pipes_iter);
   `$test_iterator -> instantiate()` (
				      .poly_R13S(poly_R13S),
				      .color_R13U(color_R13U) ,	      
				      .isQuad_R13H(isQuad_R13H),
				      .box_R13S(box_R13S),
				      .validPoly_R13H(validPoly_R13H),	
      
				      .subSample_RnnnnU(subSample_RnnnnU) ,
				      .halt_RnnnnL(halt_RnnnnL), 
      
				      .clk(clk),
				      .rst(rst),
      
				      .poly_R14S(poly_R14S),
				      .color_R14U(color_R14U) ,	      
				      .isQuad_R14H(isQuad_R14H),
				      .sample_R14S(sample_R14S),
				      .validSamp_R14H(validSamp_R14H) 
				      ) ;
   
  always @(posedge clk) begin 
     $fdisplay(iterator_file, "{\"RESET\": \"%b\",", rst);
 
     $fdisplay(iterator_file, "\"poly_in\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(iterator_file, "\"poly_in\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R13S[`$i`][`$j`],
     //;    }
     //;  }
     ",");

     $fdisplay(iterator_file, "\"color_in\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(iterator_file, "\"color_in\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R13U[`$j`],
     //;    }    
     ",");
     
     $fdisplay(iterator_file, "\"valid_in\": \"%b\",", validPoly_R13H);      
     
     $fdisplay(iterator_file, "\"is_quad_in\": \"%b\",", isQuad_R13H);

     $fdisplay(iterator_file, "\"box\": [[\"%b\", \"%b\"], [\"%b\", \"%b\"]]", 
     //$fdisplay(iterator_file, "\"box\": [[\"%h\", \"%h\"], [\"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < 2 ; $i++ ) {
     //; 	for( my $j = 0 ; $j < 2 ; $j++ ) {
       box_R13S[`$i`][`$j`],
     //;    }
     //;  }
     ",");
 
     $fdisplay(iterator_file, "\"sample_size\": \"%b\",", subSample_RnnnnU);   
     
     $fdisplay(iterator_file, "\"halt\": \"%b\",", halt_RnnnnL);

     $fdisplay(iterator_file, "\"poly_out\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(iterator_file, "\"poly_out\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R14S[`$i`][`$j`],
     //;    }
     //;  }
     ",");

     $fdisplay(iterator_file, "\"color_out\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(iterator_file, "\"color_out\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R14U[`$j`],
     //;    }    
     ",");
     
     $fdisplay(iterator_file, "\"is_quad_out\": \"%b\",", isQuad_R14H);    


     $fdisplay(iterator_file, "\"sample\": [\"%b\", \"%b\"]", 
     //$fdisplay(iterator_file, "\"sample_in\": [\"%h\", \"%h\"]", 
     //; for( my $i = 0 ; $i < 2 ; $i++ ) {
       sample_R14S[`$i`],
     //;  }
     ",");
     
     $fdisplay(iterator_file, "\"valid_sample\": \"%b\"}", validSamp_R14H);  
     
     $fdisplay(iterator_file, ",");
   end


   //; my $hash_jtree = generate( 'hash_jtree', "hash_jtree", 
   //;                        SigFig=>$sig_fig,
   //;                        Radix=>$radix,
   //;                        Vertices=>$verts,
   //;                        Axis=>$axis,
   //;                        Colors=>$colors,
   //;                        PipelineDepth=>$pipes_hash);
   `$hash_jtree -> instantiate()` (
				   .poly_R14S(poly_R14S),
				   .color_R14U(color_R14U) ,	      
				   .isQuad_R14H(isQuad_R14H),
				   .sample_R14S(sample_R14S),
				   .validSamp_R14H(validSamp_R14H),

				   .subSample_RnnnnU(subSample_RnnnnU) ,
      
				   .clk(clk),
				   .rst(rst),
      
				   .poly_R16S(poly_R16S),
				   .color_R16U(color_R16U),			
				   .sample_R16S(sample_R16S),
				   .validSamp_R16H(validSamp_R16H),
				   .isQuad_R16H(isQuad_R16H)

				   );
   
   always @(posedge clk) begin 
     $fdisplay(hash_file, "{\"RESET\": \"%b\",", rst);
 
     $fdisplay(hash_file, "\"poly_in\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(hash_file, "\"poly_in\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R14S[`$i`][`$j`],
     //;    }
     //;  }
     ",");

     $fdisplay(hash_file, "\"color_in\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(hash_file, "\"color_in\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R14U[`$j`],
     //;    }    
     ",");
     
     $fdisplay(hash_file, "\"is_quad_in\": \"%b\",", isQuad_R14H);    

     $fdisplay(hash_file, "\"sample_in\": [\"%b\", \"%b\"]", 
     //$fdisplay(hash_file, "\"sample_in\": [\"%h\", \"%h\"]", 
     //; for( my $i = 0 ; $i < 2 ; $i++ ) {
       sample_R14S[`$i`],
     //;  }
     ",");
     
     $fdisplay(hash_file, "\"valid_sample_in\": \"%b\",", validSamp_R14H);  
     
     $fdisplay(hash_file, "\"sample_size\": \"%b\",", subSample_RnnnnU);   
 
     $fdisplay(hash_file, "\"poly_out\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     //$fdisplay(hash_file, "\"poly_out\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R16S[`$i`][`$j`],
     //;    }
     //;  }
     ",");

     $fdisplay(hash_file, "\"color_out\": [\"%b\", \"%b\", \"%b\"]", 
     //$fdisplay(hash_file, "\"color_out\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R16U[`$j`],
     //;    }    
     ",");
     
     $fdisplay(hash_file, "\"is_quad_out\": \"%b\",", isQuad_R16H);    

     $fdisplay(hash_file, "\"sample_out\": [\"%b\", \"%b\"]", 
     //$fdisplay(hash_file, "\"sample_out\": [\"%h\", \"%h\"]", 
     //; for( my $i = 0 ; $i < 2 ; $i++ ) {
       sample_R16S[`$i`],
     //;  }
     ",");
     
     $fdisplay(hash_file, "\"valid_sample_out\": \"%b\"}", validSamp_R16H);  
    
     $fdisplay(hash_file, ",");
   end


   //; my $sampletest = generate( 'sampletest', "sampletest", 
   //;                        SigFig=>$sig_fig,
   //;                        Radix=>$radix,
   //;                        Vertices=>$verts,
   //;                        Axis=>$axis,
   //;                        Colors=>$colors,
   //;                        PipelineDepth=>$pipes_samp);
   `$sampletest -> instantiate()` (   
				      .poly_R16S(poly_R16S),
				      .color_R16U(color_R16U),			
				      .sample_R16S(sample_R16S),
				      .validSamp_R16H(validSamp_R16H),
				      .isQuad_R16H(isQuad_R16H),
      
				      .clk(clk),
				      .rst(rst),
      
				      .hit_R18S( hit_R18S ),
				      .color_R18U( color_R18U ),						 
				      .hit_valid_R18H( hit_valid_R18H ) 
				      );
   
   // Generating vectors for sampletest, printed in the same order as the
   // signals in the magma module

   always @(posedge clk) begin 
     $fdisplay(sample_file, "{\"RESET\": \"%b\",", rst);
     
     //$fdisplay(sample_file, "\"poly\": [[\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"], [\"%b\", \"%b\", \"%b\"]]", 
     $fdisplay(sample_file, "\"poly\": [[\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"], [\"%h\", \"%h\", \"%h\"]]", 
     //; for( my $i = 0 ; $i < $verts ; $i++ ) {
     //; 	for( my $j = 0 ; $j < $axis ; $j++ ) {
       poly_R16S[`$i`][`$j`],
     //;    }
     //;  }
     ",");
     
     //$fdisplay(sample_file, "\"color_in\": [\"%b\", \"%b\", \"%b\"]", 
     $fdisplay(sample_file, "\"color_in\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R16U[`$j`],
     //;    }    
     ",");
      
     $fdisplay(sample_file, "\"is_quad_in\": \"%b\",", isQuad_R16H);

     $fdisplay(sample_file, "\"sample\": [\"%b\", \"%b\"]", 
     //$fdisplay(sample_file, "\"sample\": [\"%h\", \"%h\"]", 
     //; for( my $i = 0 ; $i < 2 ; $i++ ) {
       sample_R16S[`$i`],
     //;  }
     ",");
     
     $fdisplay(sample_file, "\"valid_sample\": \"%b\",", validSamp_R16H);  
     
     //$fdisplay(sample_file, "\"hit\": [\"%b\", \"%b\", \"%b\"]", 
     $fdisplay(sample_file, "\"hit\": [\"%h\", \"%h\", \"%h\"]", 
     //; for( my $i = 0 ; $i < $axis ; $i++ ) {
       hit_R18S[`$i`],
     //;  }
     ",");
 
     $fdisplay(sample_file, "\"valid_hit\": \"%b\",", hit_valid_R18H);
   
     //$fdisplay(sample_file, "\"color_out\": [\"%b\", \"%b\", \"%b\"]}", 
     $fdisplay(sample_file, "\"color_out\": [\"%h\", \"%h\", \"%h\"]", 
     //; 	for( my $j = 0 ; $j < $colors ; $j++ ) {    
       color_R18U[`$j`],
     //;    }    
     );
     $fdisplay(sample_file, ",");
   end
   
   final begin
     $fdisplay(bbox_file, "]");
     $fdisplay(sample_file, "]");
     $fdisplay(hash_file, "]");
     $fdisplay(iterator_file, "]");
     $fdisplay(rast_file, "]");
   end

endmodule
